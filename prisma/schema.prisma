generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String          @id @unique // ID do usuário do Clerk
  email           String          @unique
  name            String?
  creditCards     CreditCard[]
  personCompanies PersonCompany[]
  debts           Debt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CreditCard {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String
  dueDay Int // Dia do mês (1-31)

  debts Debt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name]) // Um usuário não pode ter dois cartões com o mesmo nome
}

model PersonCompany {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String

  debts Debt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, name]) // Um usuário não pode ter duas pessoas/empresas com o mesmo nome
}

model Debt {
  id                   String        @id @default(cuid())
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId               String
  creditCard           CreditCard    @relation(fields: [cardId], references: [id], onDelete: Restrict) // Restringe a exclusão se houver dívidas
  personCompanyId      String
  personCompany        PersonCompany @relation(fields: [personCompanyId], references: [id], onDelete: Restrict) // Restringe a exclusão se houver dívidas
  totalAmount          Float
  installmentsQuantity Int
  installmentValue     Float
  startDate            DateTime      @default(now()) @db.Date // Armazena apenas a data
  description          String

  installments Installment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Installment {
  id                String   @id @default(cuid())
  debtId            String
  debt              Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade)
  installmentNumber Int // 1, 2, 3...
  dueDate           DateTime @db.Date // Data de vencimento calculada para esta parcela
  amount            Float
  isPaid            Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([debtId, installmentNumber]) // Cada número de parcela para uma dívida deve ser único
}
